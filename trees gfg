1. Minimum element in BST (traversal)
int minValue(Node *root) 
{
    if(root==NULL)
    {
        return -1;
    }
        Node *temp=root;
        while(temp->left!=NULL)
        {
            temp=temp->left;
        }
    return temp->data;    
}
---------------------------------------------------------------------------------------
2. Lowest Common Ancestor in a BST

Node* LCA(Node *root, int n1, int n2)
{
    while(root!=NULL)
    {
        if(root->data>n1 && root->data>n2)
        {
            root=root->left;
        }
        else if(root->data<n1 && root->data<n2)
        {
            root=root->right;
        }
        else
        {
            break;
        }
    }
    return root;
}
----------------------------------------------------------------------------------------
3. INSERT A NODE IN BST  ( BASIC)(root->left=funtion())

Node* insert(Node* root, int Key)
{
    
    if(root==NULL)
    {
        Node* temp=new Node(Key);
        return temp;
    }
    if(root->data==Key)
    {
        return root;
    }
    else if(root->data>Key)
    {
        root->left=insert(root->left,Key);
    }
    else
    {
        root->right=insert(root->right,Key);
    }
    return root;
}
-------------------------------------------------------------------------------------
4.Kth largest element in BST (traversal)(function())
class Solution
{
    public:
    int kthLargest(Node *root, int K)
    {
        vector<int> v;
        evaluate(root,K,v);
        return v[v.size()-K];
    }
    int evaluate(Node *root, int K, vector<int> &v)
    {
        if(root==NULL)
        {
            return -1;
        }
        evaluate(root->left,K,v);
        v.push_back(root->data);
        evaluate(root->right,K,v);
    }
};
-----------------------------------------------------
5.search a node in BST  

->(traversal)(funtion())

bool search(Node* root, int x) {
    // Your code here
    if(root==NULL)
    {
        return 0;
    }
    
    if(root->data==x)
    {
        return 1;
    }
    else if(root->data>x)
    {
        search(root->left,x);
    }
    else if(root->data<x)
    {
        search(root->right,x);
    }
    
}
//NOTE:-WE USED ELSEIF CONDITIONS BECAUSE THE TREE TRAVERSAL WERE REACHING TO NULL BEFORE REACHING THE NODE SO GIVING NULL AS RESULT
// HOWEVER BY GIVING THE ELSEIF CONDITIONS WE ARE DIRECTING PATH FOR THE SEARCH AND WILL ONLY REACH NULL WHEN DOESN'T FIND ANYTHING.

------------------------------------------------------------------------
6. Check for BST 
(checking/comparing and traversal) (int x=function())
bool isBST(Node* root) 
    {
        // Your code here
        return check(root,INT_MIN,INT_MAX);
    }
    bool check(Node *root, int min, int max)
    {
        if(root==NULL)
        {
            return 1;
        }
        else if(root->data<=min || root->data>=max)
        {
            return 0;
        }
        bool l=check(root->left,min,root->data);
        bool r=check(root->right,root->data,max);
        return l&&r;
    } 
----------------------------------------------------------------------------------
7. Print BST elements in given range (traversal, comparing limits)

vector<int> printNearNodes(Node *root, int low, int high) 
    {
        vector<int> v;
        range(root,low,high,v);
        return v;
        
        
        
    }
    void range(Node *root, int low, int high, vector<int> &v)
    {
        if(root==NULL)
        {
            return;
        }
        
        range(root->left,low,high,v);
        if(root->data>=low && root->data<=high)
        {
            v.push_back(root->data);
        }
        range(root->right,low,high,v);
    }
-------------------------------------------------------------------------
8.BINARY TREE TO BST

Node *binaryTreeToBST (Node *root)
    {
        
        //Your code goes here
        vector<int> v;
        inorder(root,v);
        int i=0;
        sort(v.begin(),v.end());
        tobst(root,v,&i);
        return root;
    }
    void inorder(Node *root, vector<int> &v)
    {
        if(root==NULL)
        {
            return;
        }
        inorder(root->left,v);
        v.push_back(root->data);
        inorder(root->right,v);
        
    }
    void tobst(Node* root, vector<int> v, int *i)
    {
        if(root==NULL)
        {
            return;
        }
        tobst(root->left,v,i);
        root->data=v[*i];
        (*i)++;
        tobst(root->right,v,i);
    }
------------------------------------------------------------------
9. Inorder Successor in BST (traversal, searching)

Node * inOrderSuccessor(Node *root, Node *x)
    {
        vector<Node*> v;
        
        inorder(root,v);
        int n = v.size();
        for(int i=0;i<n;i++)
        {
            if(v[i]==x && i<n-1)
            {
                return v[i+1];
            }
        }
        Node* temp=new Node(-1);
        return temp;
    }
    void inorder(Node *root, vector<Node*> &v)
    {
        if(root==NULL)
        {
            return;
        }   
        inorder(root->left,v);
        v.push_back(root);
        inorder(root->right,v);
    }
-------------------------------------------------------------------------

10. Count Leaves in Binary Tree (traversal,check) (int x=funtion())

int countLeaves(Node* root)
{
    
    if(root==NULL)
    {
        return 0;
    }
    if(root->left ==NULL && root->right==NULL)
    {
        return 1;
    }
    int l=countLeaves(root->left);
    int r=countLeaves(root->right);
    return l+r;
}
-------------------------------------------------------------

11. Preorder Traversal

void pre(Node *root , vector<int> &v)
{
    if(root==NULL)
    {
        return;
    }
    v.push_back(root->data);
    pre(root->left,v);
    pre(root->right,v);
    
}
vector <int> preorder(Node* root)
{
  // Your code here
  vector<int> v;
  pre(root, v);
  return v;
} 
--------------------------------------------------
12. Size of Binary Tree(basic)

void size(Node *node, int &val)
{
    if(node==NULL)
    {
        return;
    }
    size(node->left,val);
    val++;
    size(node->right,val);
    
}
int getSize(Node* node)
{
    int val=0;
    size(node,val);
    return val;
   // Your code here
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
13. INorder traversal(basic)

class Solution {
  public:
    // Function to return a list containing the inorder traversal of the tree.
    void inorder(Node *root, vector<int> &v)
    {
        if(root==NULL)
        {
            return;
        }
        inorder(root->left,v);
        v.push_back(root->data);
        inorder(root->right,v);
    }
    vector<int> inOrder(Node* root) 
    {
        vector<int> v;
        // Your code here
        inorder(root,v);
        return v;
    }
};
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
