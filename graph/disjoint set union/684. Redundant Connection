684. Redundant Connection
//https://leetcode.com/problems/redundant-connection/solutions/7064742/disjoint-set-union-by-shubham_sk70-gbtl/

class DisjointSet {
public:
    vector<int> parent,size;
    
    DisjointSet(int n)
    {
        size.resize(n+1,1);
        parent.resize(n+1);
        for(int i=1;i<=n;i++)
        {
            parent[i]=i;
        }
    }
    int findPar(int node)
    {
        if(parent[node]!=node)
        {
            parent[node]=findPar(parent[node]);
        }
        return parent[node];
    }
    void unionBySize(int u, int v)
    {
        int pu=findPar(u);
        int pv=findPar(v);
        if(pu==pv)
        {
            return;
        }
        if(size[pu]<size[pv])
        {
            parent[pu]=pv;
            size[pv]+=size[pu];
        }
        else
        {
            parent[pv]=pu;
            size[pu]+=size[pv];
        }
    }
    };
    class Solution {
    public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) 
    {
        int n=edges.size();
        DisjointSet dsu(n);
        vector<int> ans(2);
        for(auto it:edges)
        {
            int u=dsu.findPar(it[0]);
            int v=dsu.findPar(it[1]);
            if(u==v)
            {
                ans[0]=it[0];
                ans[1]=it[1];
            }
            else
            {
               dsu.unionBySize(u,v);
            }
        }
        return ans;

    }
};
